# Work Order: Layered Production Plan for the AI-Integrated Research & Coding Browser (Detailed for Electron)

## 1. Project Overview
**Description**: A locally-run, unified browser for product/idea development, integrating research, coding, and automation. Built on Electron (bundling Chromium and Node.js), it features an always-visible command line, split/fullscreen Monaco code editor, robust automation, and AI-driven workflows using cloud-based LLM APIs. Code and project state are versioned via local and online Git, with detailed logging and user-controlled AI action execution. AI responses follow a structured JSON format for metadata indexing and malleable memory.

**Core Technologies**:
1. **Browser Base**: Electron (Bundled Chromium and Node.js)
2. **Terminal**: Xterm.js
3. **Code Editor**: Monaco Editor (split/fullscreen, tabbed)
4. **Automation**: Playwright (Python)
5. **Security**: Semgrep (SAST), Grype (SCA)
6. **Version Control**:
   - Local: Git (commands executed via Node.js)
   - Online: GitHub (for open project files and context files, accessible by LLMs via links)
7. **AI Backend**:
   - Primary: Gemini 2.5 Flash and Gemini 2.0 APIs (supporting text, images, and context files)
   - Backup: DuckDuckGo chat models (e.g., Claude, Llama)
   - Accessed via HTTP API from Node.js
   - **Note**: Gemini responses use a structured JSON format with metadata (date, info_type, text with info/variables/code) for indexing, editing, and memory debugging.

## 2. General Rules, Logging, and Permissions

1. **Configuration Files**:
   - Use structured files (e.g., `config.yaml`, `styles.json`).
   - **Electron Implementation**:
     - Load/save configs in the **main process** using Node.js `fs` (`fs.readFileSync`, `fs.writeFileSync`).
     - Provide Settings UI in the **renderer process**.
     - Use `ipcMain.handle` (main) and `ipcRenderer.invoke` (renderer) for secure config data requests/updates.

2. **Logging**:
   - **Detailed Logging**: For AI actions outside renderer (file access, shell commands, code execution) in the main process.
   - **Basic Logging**: For renderer actions (tab changes, navigation, code edits).
   - **Electron Implementation**:
     - Manage detailed logs in the main process using `fs.appendFileSync` or SQLite (`sqlite3`).
     - Send renderer logs to main process via `ipcRenderer.send` for centralized timestamping and storage.

3. **Version Control (Git)**:
   - Use local Git for code storage, versioning, and logging.
   - Push open project files and context files (including structured LLM outputs) to GitHub for LLM access via links.
   - **Electron Implementation**:
     - Execute Git commands in the main process using `child_process.spawn` for live output or `exec` for final output.
     - Capture stdout/stderr for logging.
     - UI triggers in renderer communicate via `ipcRenderer.invoke`.
     - For GitHub, use Node.js libraries like `octokit` to push files, ensuring open project and context files are accessible.
   - **Note**: Structured LLM outputs (JSON with metadata) are stored in GitHub for indexing and memory debugging.
   - **References**: [simple-git](https://github.com/simple-git/simple-git), [Octokit](https://github.com/octokit/core.js)

4. **Permissions & File Sensitivity**:
   - Tag files (`critical`, `important`, `non-critical`) in config files.
   - Enforce permissions for AI/automation based on tags.
   - **Electron Implementation**:
     - File tagging and enforcement in the main process using `fs` for config reads.
     - User confirmation for critical actions via UI (renderer) and IPC (`ipcRenderer.invoke`, `ipcMain.handle`, `electron.Dialog`).

5. **AI Action Hierarchy**:
   - Levels: Automated, User Approval, Explicit Confirmation.
   - **Electron Implementation**:
     - Action level logic in the main process, referencing config rules.
     - UI prompts in renderer triggered via `webContents.send` and `ipcRenderer.on`, with responses sent back via `ipcRenderer.send`.

6. **Data Privacy Protocols**:
   - Keep data local except for GitHub pushes of open files and structured LLM outputs.
   - **Electron Implementation**:
     - Data handling in the main process using `fs`.
     - Secure renderer with `nodeIntegration: false`, `contextIsolation: true`, and a preload script via `contextBridge`.

7. **Context Files**:
   - Use JSON for structured storage (e.g., `jeff_base.json`), including LLM outputs in the specified format.
   - **Electron Implementation**:
     - Read/write context files in the main process using `fs`.
     - Send to renderer via `ipcMain.handle`/`ipcRenderer.invoke` for display/editing in Monaco Editor.
     - Push to GitHub for LLM access.

## 3. Layered Production Plan

### Chunk 1: Browser Shell & Tab System (Electron)
- **Goal**: Launch Electron window with tabbed browsing.
- **Electron Implementation**:
  - Use `BrowserWindow` in the main process for the main window.
  - Implement tabbed UI in the renderer using HTML/CSS/JS, with `BrowserView` for isolated web content.
  - Manage tab commands (e.g., new tab, change URL) via IPC.
- **References**: [Electron BrowserView](https://github.com/electron/electron/blob/main/docs/api/browser-view.md)

### Chunk 2: Terminal Integration (Xterm.js)
- **Goal**: Embed Xterm.js as an always-visible command line.
- **Electron Implementation**:
  - Integrate `@xterm/xterm` and its CSS in the renderer.
  - Send terminal input to main process via `ipcRenderer.send`.
  - Use `child_process.spawn` in the main process for shell processes, piping data to/from renderer via IPC.
  - Use `node-pty` for robust terminal management.
- **References**: [Xterm.js](https://xtermjs.org/), [node-pty](https://github.com/microsoft/node-pty)

### Chunk 3: Code Editor (Monaco Editor)
- **Goal**: Integrate Monaco Editor for coding.
- **Electron Implementation**:
  - Embed Monaco in the renderer for split/fullscreen views.
  - Sync editor content with main process via `ipcRenderer.invoke` for saving (`fs`).
  - Display linting results (from Semgrep/Grype) using Monaco APIs (`setModelMarkers`).
- **References**: [Monaco Editor](https://microsoft.github.io/monaco-editor/)

### Chunk 4: Git Integration (via Electron Main Process)
- **Goal**: Use local and online Git commands.
- **Electron Implementation**:
  - Execute Git commands (`git status`, `git diff`) in the main process using `child_process.exec`/`spawn`.
  - Push open project/context files (including structured LLM outputs) to GitHub using `octokit` or `simple-git`.
  - UI buttons in renderer trigger commands via `ipcRenderer.invoke`.
  - AI-generated commit messages use Gemini API, enforcing the structured JSON response format, sending diffs and receiving suggestions via HTTP, with user approval in renderer.
- **Note**: Gemini responses for commit messages follow the JSON format with metadata for versioning and debugging.
- **References**: [simple-git](https://github.com/simple-git/simple-git), [Octokit](https://github.com/octokit/core.js)

### Chunk 5: Automation & Security (Playwright, Semgrep, Grype)
- **Goal**: Implement automation and security scans.
- **Electron Implementation**:
  - Run Playwright scripts as subprocesses (`child_process.spawn`) in the main process, passing URLs/actions.
  - Parse Semgrep/Grype JSON outputs in the main process using `JSON.parse`.
  - Send results to renderer via IPC for Monaco display (`setModelMarkers`).
- **References**: [Playwright](https://playwright.dev/python/docs/api/class-playwright), [Electron Python Example](https://github.com/fyears/electron-python-example)

### Chunk 6: Visual Automation & Profiling
- **Goal**: Enable visual automation with cached UI element data.
- **Electron Implementation**:
  1. Capture screenshots using `webContents.capturePage` in the main process, converting to PNG buffer.
  2. Extract DOM using `webContents.executeJavaScript` (e.g., `element.outerHTML`).
  3. Send screenshot/DOM to Gemini 2.5 Flash (image support) via HTTP API, enforcing the structured JSON response format.
  4. Store in `webpage_layout_reference.json` using `fs`, including LLM output metadata.
  5. Use cache for Playwright automation, refreshing if stale (e.g., DOM hash changes).
  6. Implement UI feedback loop for element correction via IPC.
- **Note**: Gemini responses for element descriptions use the JSON format with metadata for indexing and memory debugging, stored in GitHub.
- **References**: [browser-use](https://github.com/browser-use/browser-use)

### Chunk 7: AI Backend Integration & Doctor Profile
- **Goal**: Integrate Gemini APIs and implement Doctor profile.
- **Electron Implementation**:
  - Use Node.js `fetch` or `axios` in the main process to call Gemini 2.5 Flash/2.0 APIs (`https://api.gemini.com/...`).
  - Send prompts, images, and GitHub links (for context files) to reduce token usage, enforcing the structured JSON response format.
  - Fallback to DuckDuckGo chat models if Gemini fails (without structured format).
  - Implement Doctor logic in the main process, monitoring errors and querying Gemini for suggestions, storing responses in the JSON format.
  - UI for AI chat in renderer, communicating via `ipcRenderer.invoke`.
- **Note**: Gemini responses for Doctor suggestions and chat use the JSON format for metadata indexing and memory debugging, stored in GitHub.
- **References**: [Gemini API](https://cloud.google.com/gemini/docs), [axios](https://www.npmjs.com/package/axios)

### Chunk 8: Advanced Context & Multi-Model Handling
- **Goal**: Manage AI tabs and context switching.
- **Electron Implementation**:
  - UI logic for context tabs in the renderer.
  - Store context data (JSON, including structured LLM outputs) in the main process using `fs`, sync via `ipcMain.handle`.
  - Background queries to Gemini APIs managed by main process timers (`setInterval`), enforcing the JSON response format.
  - Multi-model querying routes to Gemini 2.5 Flash, 2.0, or DuckDuckGo models, synthesizing responses in the main process.
  - Store LLM tier list in JSON, updated via API data or manual edits.
- **Note**: Gemini responses for context queries use the JSON format for versioning and debugging, stored in GitHub.
- **References**: [Node.js Timers](https://nodejs.org/api/timers.html)

### Chunk 9: Error Handling & Self-Healing
- **Goal**: Implement robust error handling.
- **Electron Implementation**:
  - Handle errors in the main process for `child_process`, `fs`, HTTP API calls, and IPC.
  - Log errors and send structured details to Gemini for analysis, enforcing the JSON response format.
  - Display suggested fixes in renderer via `webContents.send`.
  - Update Doctor’s Notes (`fs`) with resolutions, incorporating Gemini’s JSON outputs.
- **Note**: Gemini error analysis responses use the JSON format for metadata and debugging, stored in GitHub.
- **References**: [Node.js Error Handling](https://nodejs.org/api/errors.html)

### Chunk 10: UI/UX Refinement & Testing
- **Goal**: Refine interface and ensure usability.
- **Electron Implementation**:
  - Develop UI in renderer with dark mode, Fira Code font, and Material Icons.
  - Implement shortcuts (e.g., `Ctrl+R` for run) and accessibility features.
  - Test with Playwright scripts for UI interactions.
- **References**: [Electron Accessibility](https://www.electronjs.org/docs/latest/tutorial/accessibility)

## 4. Critical Review & Mitigations
1. **Permissions/File Tagging**: Enforced in main process with `fs` and UI review via IPC.
2. **Testing Environment**: Use Python virtual environments via `child_process`. Explore Docker for sandboxing (see Chunk 5).
3. **LLM Tier List**: Manual updates via Monaco, automated via Gemini API data scraping (`node-fetch`, `cheerio`).
4. **Self-Healing**: Doctor logic in main process, using Gemini for error analysis with structured JSON responses.
5. **Log Management**: Prune/archive logs with `fs`, provide search UI in renderer via IPC.
6. **User Fatigue**: Optimize UI/UX for minimal interaction overload.

## 6. Reworked Deep Research Questions
1. **IPC Patterns**: What are the most effective Electron IPC patterns (ipcMain/ipcRenderer, invoke/handle) for high-frequency data streams (e.g., Xterm.js output) and request-response cycles (e.g., file operations, script execution)? How to prevent main process blocking?**Solution**: Use ipcRenderer.invoke and ipcMain.handle for asynchronous communication. Offload heavy tasks to worker threads or child processes. For terminals, use node-pty to stream data efficiently.
2. **External Process Management**: What are best practices for managing concurrent processes (child_process.spawn, execa) for Playwright, Semgrep, Grype, and Git? How to handle stdout/stderr, exit codes, and structured data in production builds?**Solution**: Use execa for promise-based process management, streaming outputs with buffer: false. Parse JSON outputs with JSON.parse. Bundle tools or assume system availability (e.g., Git).
3. **Data Structuring**: How to structure and manage LLM context and state data (e.g., conversation history, project states) using fs or NeDB? How to sync efficiently via IPC?**Solution**: Use NeDB for queryable storage in userData. Sync via ipcMain.handle with pagination to minimize data transfer.
4. **JSON Parsing and UI**: How to parse large JSON outputs from Semgrep/Grype and display in Monaco Editor (markers, squiggles) efficiently?**Solution**: Parse with JSON.parse or stream-json for large data. Use Monaco’s setModelMarkers for visual feedback, grouping findings by file.
5. **Visual Automation**: What are the steps and APIs (webContents.capturePage, executeJavaScript) for capturing webview content and DOM? How to structure webpage_layout_reference.json and detect staleness?**Solution**: Capture screenshots and DOM with absolute coordinates. Store in JSON with selectors and structured LLM outputs. Detect staleness via DOM hash comparisons.
6. **Sandboxing**: What are secure methods for sandboxing Python scripts on Windows for the “Test” feature, using Docker or OS isolation?**Solution**: Use Docker via dockerode for strong isolation, prompting user installation. Balance security with setup complexity.